plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'com.mysql:mysql-connector-j:8.4.0'
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    implementation 'net.coobird:thumbnailator:0.4.20'
    implementation 'com.drewnoakes:metadata-extractor:2.19.0'
    
    // OCI SDK dependencies
    implementation 'com.oracle.oci.sdk:oci-java-sdk-objectstorage:3.67.3'
    implementation 'com.oracle.oci.sdk:oci-java-sdk-common-httpclient-jersey:3.67.3'
    
    // Complete Jersey dependencies required by OCI SDK
    implementation 'org.glassfish.jersey.core:jersey-client:2.39.1'
    implementation 'org.glassfish.jersey.core:jersey-common:2.39.1'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.39.1'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.39.1'
    implementation 'org.glassfish.jersey.connectors:jersey-apache-connector:2.39.1'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
}

jar {
    enabled = false
}

//jar {
//    manifest {
//        attributes 'Main-Class': 'com.example.backend.BackendApplication'
//    }
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}
//
//
//tasks.withType(Jar) {
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//}

tasks.named('test') {
//    useJUnitPlatform()
}
